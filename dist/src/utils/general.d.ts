import { Schema } from 'mongoose';
import { AnyRecord, EmptyObjectOf, Nullable, Path, RequestHandler } from '../types/general';
export declare const replaceAll: (value: string, match: string, replace: string) => string;
export declare const idToString: (id: string | Schema.Types.ObjectId) => string;
export declare const isEqualIds: (id1: string | Schema.Types.ObjectId, id2: string | Schema.Types.ObjectId) => boolean;
export declare const isFunction: (value: unknown) => value is Function;
export declare const range: (count: number) => Array<number>;
export declare const line: <T = any>(count: number, fill: T) => Array<T>;
export declare const includesId: (array: Array<string | Schema.Types.ObjectId>, id: string | Schema.Types.ObjectId) => boolean;
export declare const isEqual: (a: any, b: any) => boolean;
export declare const isEqualObj: (aArg: AnyRecord | undefined, bArg: AnyRecord | undefined) => boolean;
export declare const combineMiddleware: (...mids: Array<RequestHandler>) => RequestHandler<AnyRecord, any, any, AnyRecord, Record<string, any>>;
export declare const isEmpty: <T = object>(value: T | null | undefined) => value is EmptyObjectOf<T> | null | undefined;
export declare const get: <T extends AnyRecord = AnyRecord>(obj: T, path: Path<T>) => any;
export declare const set: <T extends AnyRecord = AnyRecord>(obj: T, path: Path<T>, value: any) => void;
export declare const isNullOrUndefined: (value: unknown) => value is null | undefined;
export declare const isNumber: (value: unknown) => value is number;
export declare const isString: (value: unknown) => value is string;
export declare const isBoolean: (value: unknown) => value is boolean;
export declare const isArray: (value: unknown) => value is Array<any>;
export declare const isNullOrUndefinedOrEmptyString: (value: unknown) => value is null | undefined | "";
export declare const compact: <T = any>(value: Array<Nullable<T>>) => Array<T>;
export declare const addRow: <T = any>(data: Array<T>, rowData: T, position?: "start" | "end") => Array<T>;
export declare const movRow: <T = any>(data: Array<T>, fromIndex: number, toIndex: number) => Array<T>;
export declare const addStringToUniqueArray: <T extends string = string>(array: Array<T>, value: T) => Array<T>;
export declare const getRandomHash: () => string;
export declare const deepJsonCopy: <T extends AnyRecord = AnyRecord>(json: T) => T;
export declare const getFlattenJson: <T extends AnyRecord = AnyRecord>(value: T) => T;
export declare const getFlattenUndefinedJson: <T extends AnyRecord = AnyRecord>(value: T) => T;
export declare const stringExtract: (matcher: string, value: string) => Array<string> | null;
export declare const numberExtract: (value: string) => Array<number> | null;
export declare const excludeRepetedValues: <T = any>(values: Array<T>) => Array<T>;
export declare const getRandomNumber: (min: number, max: number) => number;
export declare const getCharCode: (length: number) => string;
export declare const getNumberCode: (length: number) => string;
export declare const baseConversion: (n: number, digits: number, alphabet: string) => string;
export declare const mergeArrays: <T = any>(...allArray: Array<Array<T>>) => Array<T>;
export declare const fixToTwoDigits: (number: number) => number;
export declare const isObject: (item: any) => any;
export declare const mergeDeep: <T extends AnyRecord = AnyRecord>(target: T, source: Partial<T>, mergeCallback?: (targetValue: any, sourceValue: any) => any) => T;
export interface Logger {
    error: (e: any) => void;
    info: (e: any) => void;
}
export declare const getStrongPassword: () => string;
